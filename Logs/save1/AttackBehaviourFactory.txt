INPUT: Your next job as the narrator is to generate a JSON file that represents a collection of attack behaviors that corresponds to each of the enemy attack names you gave earlier. Each attack behavior should be defined as an object with the following properties:

Key: A unique string identifier for each attack. This is used to reference the attack in the game's code. These keys will be used later. Bear in mind you will generate at least 5 enemies, so you will need 4 keys per enemy (minimum 20).
Expression: A string containing C# code that defines what the attack does when executed. This should be simple commands that affect a hypothetical Player class. You have one functions you can use: target.ReceiveAttack(damage, crit). Ensure the damage corresponds to the attack magnitude and the context of the game, and crit is an int between 0 - 100. If no crit is entered, it will be defaulted to 20.
Manacost: A number from 0-20 dictating how much mana the skill costs to use
Statuses: A list of strings describing status effects of the attack, which can influence gameplay mechanics or visuals. You will have to define all these later.
Narrative: A string containing the output whenever this attack is used. If the enemy is casting it, it will begin with "The {enemyname} {Narrative}", and if the player casts it it will begin with "The player {Narrative}". Ensure this makes grammatical sense.
Here is how each component should be formatted and an example for each:

Key: Should be the name of the attack, like "Fireball".
Expression: Should include a method call on target, like "target.ReceiveAttack(50, 30)". 
Statuses: These are the status effects that the attack applies.
Narrative: Should make sense if coming from an enemy or the player, like "throws a punch".

All behaviours should match the keys used for previous enemies, however, one attack should be called PlayerBasicAttack, used only for the player's beginning move. See the following example:

{
  "PlayerBasicAttack": {
    "Name": "PlayerBasicAttack",
    "Expression": "target.ReceiveAttack(5, 60)",
    "Manacost": 0
    "Statuses": []
    "Narrative": "throws a punch."
  },
  "Bloody Slice": {
    "Name": "Bloody Slice",
    "Expression": "target.ReceiveAttack(10, 30)",
    "Manacost": 5
    "Statuses": ["Bleed"]
    "Narrative": "slices violently, causing blood to fly."
  },
  "Backstab": {
    "Name": "Backstab",
    "Expression": "target.ReceiveAttack(15, 90)",
    "Manacost": 3
    "Statuses": ["Cripple", "Cloaked"]
    "Narrative": "uses the element of surprise to cause severe damage."
  },
  "Taunt": {
    "Name": "Taunt",
    "Expression": "target.ReceiveAttack(0, 0)",
    "Manacost": 10
    "Statuses": ["AtkPowered", "DefenceBoost"]
    "Narrative": "calls out rude names, taunting everybody in the area."
  }
  ...
}

Ensure all output is parsable. This is crucial, as if any of your output is not code parsable, the code will break. Your only command in target.ReceiveAttack(int), anything else is not accepted. If a single command is of different syntax, the code will break.

OUTPUT: ```json
{
  "PlayerBasicAttack": {
    "Name": "PlayerBasicAttack",
    "Expression": "target.ReceiveAttack(8, 20)",
    "Manacost": 0,
    "Statuses": [],
    "Narrative": "executes a basic sword slash."
  },
  "FireWhip": {
    "Name": "FireWhip",
    "Expression": "target.ReceiveAttack(12, 25)",
    "Manacost": 4,
    "Statuses": ["Burn"],
    "Narrative": "unleashes a fiery lash, burning the target."
  },
  "ShadowStrike": {
    "Name": "ShadowStrike",
    "Expression": "target.ReceiveAttack(14, 40)",
    "Manacost": 6,
    "Statuses": ["Blind"],
    "Narrative": "emerges from the shadows to deliver a devastating blow."
  },
  "PoisonDart": {
    "Name": "PoisonDart",
    "Expression": "target.ReceiveAttack(7, 30)",
    "Manacost": 3,
    "Statuses": ["Poison"],
    "Narrative": "shoots a toxic dart, poisoning the target."
  },
  "EarthquakePunch": {
    "Name": "EarthquakePunch",
    "Expression": "target.ReceiveAttack(15, 50)",
    "Manacost": 8,
    "Statuses": ["Stun"],
    "Narrative": "strikes the ground with titanic force, shaking the very earth."
  },
  "HealingLight": {
    "Name": "HealingLight",
    "Expression": "target.ReceiveAttack(-10, 0)",
    "Manacost": 10,
    "Statuses": ["Heal"],
    "Narrative": "summons a radiant light, healing wounds."
  },
  "IceSpear": {
    "Name": "IceSpear",
    "Expression": "target.ReceiveAttack(10, 20)",
    "Manacost": 5,
    "Statuses": ["Freeze"],
    "Narrative": "conjures a spear of ice, impaling the target with chilling cold."
  },
  "ThunderClap": {
    "Name": "ThunderClap",
    "Expression": "target.ReceiveAttack(13, 35)",
    "Manacost": 7,
    "Statuses": ["Daze"],
    "Narrative": "claps hands together, releasing a deafening thunderbolt."
  },
  "WindSlash": {
    "Name": "WindSlash",
    "Expression": "target.ReceiveAttack(9, 25)",
    "Manacost": 4,
    "Statuses": ["Knockback"],
    "Narrative": "sends a razor-sharp gust of wind slicing through the air."
  },
  "MysticBind": {
    "Name": "MysticBind",
    "Expression": "target.ReceiveAttack(0, 0)",
    "Manacost": 12,
    "Statuses": ["Root"],
    "Narrative": "casts ancient runes, binding the target in place."
  }
}
```